#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros dynamic-space-size=8000 -Q -- $0 "$@"
|#

#|

   problem.ros [initial state bits...] [goal state bits...]


This is a converter from a CSV file containing the propositional state vectors
to a PDDL *problem* file, initially wrote for AMA1, in conjunction with domain.ros.

*** THIS PROGRAM IS NOT USED IN THE AMA1. ONLY USED IN AMA3/Cube-Space AE ***

old message for AMA1:

  Problem files are small, just containing the initial and the goal states,
  but the PDDL domain file is huge, due to the large number of actions.
  Thus, while in princeple any PDDL-based solver should be able to parse it and solve it,
  some solvers may fail to even read/parse it (e.g. memory exhaust),
  or take incredibly larger amount of runtime.
  Thus we developped sas.ros, which skips part of the computation and
  replace the original python script (very slow) in Fast Downward to a compiled lisp program (sas.ros).
  Since a SAS file contains the information of both the domain file and the problem file,
  neither problem.ros nor domain.ros is necessary now.

In AMA2, this file is not used either, because action rules are encoded in a neural network.

In AMA3, the domain file is compact because (unlike before)
a compact set of action rules are extracted directly,
unlike AMA1 which has no mechanism for generalization
and had to dump all transitions into one huge domain file.

This program takes as arguments a sequence 0s and 1s
and output the corresponding PDDL problem file.
The sequence denotes the initial state and the goal state.

The first half of the arguments are treated as the initial state,
and the second half of the arguments as the goal state.
For example, if this program is invoked as `problem.bin 0 0 1 1`,
the initial state is `0 0` (i.e. both propositional variables are false)
and the goal state is `1 1` (i.e. both variables are true).
The length of the two states must match.

PDDL files are compatible to any classical planning solvers.
See the past competition solvers for example.
http://www.plg.inf.uc3m.es/ipc2011-deterministic/
https://helios.hud.ac.uk/scommv/IPC-14/planners.html

|#

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(cl-csv iterate alexandria trivia.ppcre function-cache) :silent t)
  )

(defpackage :ros.script.to-sas.3690427216
  (:use :cl :iterate :alexandria :trivia :trivia.ppcre :function-cache))
(in-package :ros.script.to-sas.3690427216)

(function-cache:defcached sym (&rest args)
  (intern (format nil "~{~a~}" args))
  ;; (apply #'symbolicate (mapcar #'princ-to-string args))
  )

(defun z (dim)
  "(z 0) returns a form (Z0) and alike"
  (list (sym 'z dim)))

(defun make-problem (input)
  (let* ((dim (/ (length input) 2))
         (init (subseq input 0 dim))
         (goal (subseq input dim))
         (dims (iota dim)))
    (assert (= (length init) (length goal)))
    `(define (problem ,(symbolicate
                        (format nil "PROBLEM-~{~a~^-~}"
                                (reverse
                                 (subseq
                                  (multiple-value-list
                                   (get-decoded-time)) 0 6)))))
         (:domain latent)
       (:objects)
       (:init
        ,@(iter (for d in dims)
                (for value in init)
                (ematch value
                  ;; For a wildcard, it is ok to specify the arbitrary value
                  (2 (collect (z d)))
                  (1 (collect (z d)))
                  (0 (collect `(not ,(z d)))))))
       (:goal
        (and
         ,@(iter (for d in dims)
                 (for value in goal)
                 (ematch value
                   (2 nil)  ; because either is ok
                   (1 (collect (z d)))
                   (0 (collect `(not ,(z d)))))))))))

(defun main (ig)
  (let ((coordinates (iter (for b in-file ig)
                           (collecting b)))
        (*print-right-margin* 70))
    (format t "~(~:S~)~%"
            (make-problem coordinates))))


;;; vim: set ft=lisp lisp:



